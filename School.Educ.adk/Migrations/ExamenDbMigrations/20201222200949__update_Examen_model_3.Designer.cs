// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Educ.adk.Areas.Inspection.Data;

namespace School.Educ.adk.Migrations.ExamenDbMigrations
{
    [DbContext(typeof(ExamenDb))]
    [Migration("20201222200949__update_Examen_model_3")]
    partial class _update_Examen_model_3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("School.Educ.adk.Areas.Inspection.Models.Assertion", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Intituler")
                        .IsRequired();

                    b.Property<string>("QuestionID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Assertions");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Inspection.Models.Examen", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeAcces")
                        .IsRequired();

                    b.Property<DateTime>("DateExamen");

                    b.Property<string>("Description");

                    b.Property<DateTime>("Duree");

                    b.Property<string>("IdInspecteur")
                        .IsRequired();

                    b.Property<int>("Periode");

                    b.Property<string>("Serie")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Examens");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Inspection.Models.Participant", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateExamen");

                    b.Property<string>("IdentifiantEleve")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Inspection.Models.Question", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BonneReponse");

                    b.Property<double>("Cote");

                    b.Property<string>("Enoncer");

                    b.Property<string>("ExamenID")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("ExamenID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Inspection.Models.Reponse", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ParticipantID")
                        .IsRequired();

                    b.Property<double>("Point");

                    b.Property<string>("QuestionID")
                        .IsRequired();

                    b.Property<string>("ReponseDonnee")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("ParticipantID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Reponses");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Professeur.Models.Echange", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Cotation");

                    b.Property<string>("Inspecteur");

                    b.Property<string>("LeconID");

                    b.Property<string>("Remarque");

                    b.HasKey("ID");

                    b.HasIndex("LeconID")
                        .IsUnique()
                        .HasFilter("[LeconID] IS NOT NULL");

                    b.ToTable("Echange");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Professeur.Models.Lecon", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateLecon");

                    b.Property<string>("IdentifiantCours");

                    b.Property<string>("IdentifiantProfesseur");

                    b.Property<string>("LeconDonnee");

                    b.HasKey("ID");

                    b.ToTable("Lecon");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Inspection.Models.Assertion", b =>
                {
                    b.HasOne("School.Educ.adk.Areas.Inspection.Models.Question", "Question")
                        .WithMany("Assertion")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Inspection.Models.Question", b =>
                {
                    b.HasOne("School.Educ.adk.Areas.Inspection.Models.Examen", "Examen")
                        .WithMany("Questions")
                        .HasForeignKey("ExamenID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Inspection.Models.Reponse", b =>
                {
                    b.HasOne("School.Educ.adk.Areas.Inspection.Models.Participant", "Participant")
                        .WithMany("Reponses")
                        .HasForeignKey("ParticipantID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("School.Educ.adk.Areas.Inspection.Models.Question", "Question")
                        .WithMany("Reponse")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Professeur.Models.Echange", b =>
                {
                    b.HasOne("School.Educ.adk.Areas.Professeur.Models.Lecon", "Lecon")
                        .WithOne("Echange")
                        .HasForeignKey("School.Educ.adk.Areas.Professeur.Models.Echange", "LeconID");
                });
#pragma warning restore 612, 618
        }
    }
}
