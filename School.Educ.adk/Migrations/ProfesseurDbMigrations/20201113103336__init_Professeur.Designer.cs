// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Educ.adk.Areas.Professeur.Data;

namespace School.Educ.adk.Migrations.ProfesseurDbMigrations
{
    [DbContext(typeof(ProfesseurDb))]
    [Migration("20201113103336__init_Professeur")]
    partial class _init_Professeur
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("School.Educ.adk.Areas.Professeur.Models.Cotation", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EpreuveID");

                    b.Property<string>("IdentifiantEleve")
                        .IsRequired();

                    b.Property<double>("Point");

                    b.HasKey("ID");

                    b.HasIndex("EpreuveID")
                        .IsUnique()
                        .HasFilter("[EpreuveID] IS NOT NULL");

                    b.ToTable("Cotations");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Professeur.Models.Echange", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Cotation");

                    b.Property<string>("Inspecteur");

                    b.Property<string>("LeconID");

                    b.Property<string>("Remarque");

                    b.HasKey("ID");

                    b.HasIndex("LeconID")
                        .IsUnique()
                        .HasFilter("[LeconID] IS NOT NULL");

                    b.ToTable("Echanges");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Professeur.Models.Epreuve", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateEpreuve");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<string>("IdentifiantCours")
                        .IsRequired();

                    b.Property<string>("IdentifiantProfesseur")
                        .IsRequired();

                    b.Property<string>("Periode")
                        .IsRequired();

                    b.Property<int>("Total");

                    b.HasKey("ID");

                    b.ToTable("Epreuves");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Professeur.Models.Lecon", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateLecon");

                    b.Property<string>("IdentifiantCours");

                    b.Property<string>("IdentifiantProfesseur");

                    b.Property<string>("LeconDonnee");

                    b.HasKey("ID");

                    b.ToTable("Lecons");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Professeur.Models.Cotation", b =>
                {
                    b.HasOne("School.Educ.adk.Areas.Professeur.Models.Epreuve", "Epreuve")
                        .WithOne("Cotation")
                        .HasForeignKey("School.Educ.adk.Areas.Professeur.Models.Cotation", "EpreuveID");
                });

            modelBuilder.Entity("School.Educ.adk.Areas.Professeur.Models.Echange", b =>
                {
                    b.HasOne("School.Educ.adk.Areas.Professeur.Models.Lecon", "Lecon")
                        .WithOne("Echange")
                        .HasForeignKey("School.Educ.adk.Areas.Professeur.Models.Echange", "LeconID");
                });
#pragma warning restore 612, 618
        }
    }
}
